//FLASSP   JOB  (),'PCXGEN',CLASS=J,MSGCLASS=Z,                         00001001
//         NOTIFY=$                                                     00002001
//********************************************************************* 00003001
//*                PL/I COMPILE AND LINK                              * 00004001
//********************************************************************* 00005001
// EXEC PLIXCL,                                                         00006001
//   PARM.PLI='M,NIS,STMT,XREF,GS,AG,LANGLVL(SPROG)',                   00007001
//   PARM.LKED='LIST,MAP,XREF'                                          00008001
//PLI.SYSPRINT DD SYSOUT=X,CHARS=GT12                                   00009001
//PLI.SYSLIB   DD DSN=FLASS.PF.PLIMAC,DISP=SHR                          00009101
//PLI.SYSIN    DD *                                                     00009201
 /********************************************************************/ 00011001
 /*                                                                  */ 00020001
 /* pcxgen: Generate PCX format monochrome bitmap *TEST*             */ 00021004
 /* Peter Flass -- NYS LBDC                                          */ 00022001
 /*                Feb, 2001                                         */ 00023001
 /*                                                                  */ 00024001
 /********************************************************************/ 00025001
 PCXGEN: proc options(main);                                            00026001
                                                                        00027001
                                                                        00028001
 dcl   PCXOUT                record output                              00029001
                             env( FB recsize(128) );                    00030001
                                                                        00040001
 dcl   pcxp                  ptr,                                       00040101
       pcx_hdr_x             char(128)           based(pcxp),           00040201
     1 pcx_hdr               unaligned           based(pcxp),           00040301
       5 pcx_maker           char(1),       /* maker id        '0A'x */ 00040401
       5 pcx_version         char(1),       /* file version id       */ 00040501
       5 pcx_code            char(1),       /* encoding        1=RLE */ 00040601
       5 pcx_bpp             bit(8),        /* bits per pixel        */ 00040701
       5 pcx_x1              fixed bin(15), /* starting x coordinate */ 00040801
       5 pcx_y1              fixed bin(15), /* starting y coordinate */ 00040901
       5 pcx_x2              fixed bin(15), /* ending x coordinate   */ 00041001
       5 pcx_y2              fixed bin(15), /* ending y coordinate   */ 00041101
       5 pcx_hres            fixed bin(15), /* horizontal resolution */ 00041201
       5 pcx_vres            fixed bin(15), /* vertical resolution   */ 00041301
       5 pcx_triple      (16),              /* palette               */ 00041401
         10 pcx_red          char(1),       /*                       */ 00041501
         10 pcx_green        char(1),       /*                       */ 00041601
         10 pcx_blue         char(1),       /*                       */ 00041701
       5 pcx_vmode           bit(8),        /* reserved - zero       */ 00041801
       5 pcx_nplanes         bit(8),        /* number of planes      */ 00041901
       5 pcx_bytes_per_line  fixed bin(15), /* bytes per line        */ 00042001
       5 pcx_pallette_info   fixed bin(15), /* pallette type         */ 00042101
       5 pcx_hscreen         fixed bin(15), /* H screen size         */ 00042201
       5 pcx_vscreen         fixed bin(15), /* V screen size         */ 00042301
       5 fil                 char(54);      /* reserved - zero       */ 00042401
                                                                        00042501
 dcl   pBuf                  ptr;                                       00042602
 dcl   pcx_buffer            char(128);                                 00042701
                                                                        00042801
 dcl   i                     fixed bin(15);                             00042901
 dcl   p                     ptr;                                       00043003
 dcl   pound             (32)char(4)             init(                  00043103
    '73730c73'x,   'dadadada'x,   '0cda8c8c'x,   '8c8c8c8c'x,           00043203
    '8c8c8c8c'x,   '8c8c8c8c'x,   '8c8cac8c'x,   '8c8c548c'x,           00043303
    '8c9c8c8c'x,   'ac148c8c'x,   '548c8c9c'x,   '8c8cac14'x,           00043403
    'CCF18C8C'x,   'F18C8CCC'x,   '8C8C8C8C'x,   '8C8C8C8C'x,           00043503
    '8C8C8C8C'x,   '8C8C8C8C'x,   '8C8C8C8C'x,   'ED9CACF3'x,           00043603
    '7341AC73'x,   '7341AC73'x,   'ED9CACF3'x,   '8C8C8C8C'x,           00043703
    '8C8C8C8C'x,   '8C8CCC37'x,   'CC73CC73'x,   'CC73CC73'x,           00043803
    '8C8C8C8C'x,   'CC37CC73'x,   'CC73CC73'x,                          00043903
    '00000000'x    ); /* Last 4 bytes unused */                         00044003
                                                                        00044103
 %include builtins;                                                     00044203
 %page;                                                                 00044303
                                                                        00044403
   open file(PCXOUT) output;                                            00044503
                                                                        00044603
   /* Create PCX Header */                                              00044703
   pBuf = addr(pcx_buffer);                                             00044803
   pcx_buffer = repeat( '00'x, cstg(null()->pcx_hdr_x)-1 );             00044903
   pcxp = addr(pcx_buffer);                                             00045003
   pcx_maker   = '0A'x;                                                 00045103
   pcx_version = '05'x; /* Version 3.0+ */                              00045203
   pcx_code    = '01'x;                                                 00045303
   pcx_bpp     = '01'bx;                                                00045403
   pcx_x1      = bsw(0);                                                00045503
   pcx_y1      = bsw(0);                                                00045603
   pcx_x2      = bsw(31);                                               00045703
   pcx_y2      = bsw(31);                                               00045803
   pcx_hres    = bsw(300);                                              00045903
   pcx_vres    = bsw(300);                                              00046003
   pcx_red(2)  = 'FF'x;                                                 00046103
   pcx_green(2)= 'FF'x;                                                 00046203
   pcx_blue(2) = 'FF'x;                                                 00046303
   pcx_nplanes = '01'bx;                                                00046403
   pcx_bytes_per_line = bsw(4);                                         00046503
   pcx_pallette_info  = bsw(1);                                         00046603
   write file(PCXOUT) from(pcx_buffer);                                 00046703
   pcx_buffer = repeat( '00'x, cstg(null()->pcx_hdr_x)-1 );             00046803
                                                                        00046903
   /* Character matrix */                                               00047003
   p = addr(pound);                                                     00047103
   do i=1 to 31;                                                        00047203
     call encline( p, 4 );                                              00047303
     p=p+4;                                                             00047403
     end;                                                               00048003
                                                                        00048501
   if pBufª=addr(pcx_buffer)                                            00048602
   then write file(PCXOUT) from(pcx_buffer);                            00048701
   close file(PCXOUT);                                                  00048801
   return;                                                              00048901
                                                                        00049001
   /*----------------------------------------------------------------*/ 00049102
   /* Encode one scan line                                           */ 00049202
   /* (encline and encput based on sample code in PCX spec)          */ 00049302
   /*----------------------------------------------------------------*/ 00049402
   encline: proc(pScan,Len);                                            00049502
     dcl pScan               ptr;                                       00049602
     dcl Len                 fixed bin(15);                             00049702
     dcl pS                  ptr;                                       00049802
     dcl c                   char(1) based(pS);                         00049902
     dcl (this,last)         char(1);                                   00050002
     dcl RunCount            fixed bin(15)       init(1);               00050102
     dcl SrcIndex            fixed bin(15);                             00050202
     pS = pScan;                                                        00050302
     last = c;                                                          00050402
     do SrcIndex=1 to Len-1;                                            00050502
       pS = pS+1;                                                       00050602
       this = c;                                                        00050702
       if this=last then do;                                            00050802
         RunCount=RunCount+1;                                           00050902
         if RunCount=63 then do;                                        00051002
           call encput(last,RunCount);                                  00051102
           RunCount=0;                                                  00051202
           end; /* RunCount=63 */                                       00051302
         end; /* this=last */                                           00051403
       else do;                                                         00051503
         if RunCountª=0                                                 00051603
         then call encput(last,RunCount);                               00051703
         last=this;                                                     00051803
         RunCount=1;                                                    00051903
         end; /* else */                                                00052003
       end; /* do SrcIndex */                                           00052103
     if RunCountª=0                                                     00052202
     then call encput(last,RunCount);                                   00052302
     end encline;                                                       00052402
                                                                        00052502
   /*----------------------------------------------------------------*/ 00052602
   /* Write Data Byte to buffer with optional leading run length     */ 00052702
   /*----------------------------------------------------------------*/ 00052802
   encput: proc(c,cnt);                                                 00052902
     dcl c                   char(1);                                   00053002
     dcl b                   bit(8) based( addr(c) );                   00053102
     dcl cnt                 fixed bin(15);                             00053202
     dcl 1 dummy             aligned based( addr(cnt) ),                00053302
           5 fil             bit(8),                                    00053402
           5 cnt8            bit(8);                                    00053502
     dcl cx                  char(1) based;                             00053602
     if cnt=1 & substr(b,1,2)ª='11'b  /* No run length     */           00053702
     then do;                                                           00053802
       call putbyte(c);                                                 00053902
       end;                                                             00054002
     else do;                         /* Run length needed */           00054102
       substr(cnt8,1,2) = '11'b;                                        00054202
       call putbyte(addr(cnt8)->cx);                                    00054302
       call putbyte(c);                                                 00054402
       end;                                                             00054502
     end encput;                                                        00054602
                                                                        00054702
   /*----------------------------------------------------------------*/ 00054802
   /* Write One Byte to buffer, dump buffer if full.                 */ 00054902
   /*----------------------------------------------------------------*/ 00055002
   putbyte: proc(c);                                                    00055102
     dcl c                   char(1);                                   00055202
     dcl b                   char(1) based(pBuf);                       00055302
     b=c;                                                               00055402
     pBuf = pBuf+1;                                                     00055502
     if pBuf = ( addr(pcx_buffer) + length(pcx_buffer) ) then do;       00055602
       write file(PCXOUT) from(pcx_buffer);                             00055702
       pcx_buffer = repeat( '00'x, cstg(null()->pcx_hdr_x)-1 );         00055802
       pBuf = addr(pcx_buffer);                                         00055902
       end;                                                             00056002
     end putbyte;                                                       00056102
                                                                        00056202
   /*----------------------------------------------------------------*/ 00056302
   /* Swap bytes in a fixed bin(15) number                           */ 00056402
   /*----------------------------------------------------------------*/ 00056502
   bsw: proc(w) returns( fixed bin(15) );                               00056602
     dcl w                   fixed bin(15);                             00056702
     dcl r                   fixed bin(15);                             00056802
     dcl c                (2)char(1)   based;                           00056902
     addr(r)->c(1) = addr(w)->c(2);                                     00057002
     addr(r)->c(2) = addr(w)->c(1);                                     00057102
     return(r);                                                         00057202
     end bsw;                                                           00057302
                                                                        00057402
   end PCXGEN;                                                          00058002
//* -------------- SOURCE PROGRAM GOES BEFORE HERE -------------------* 00060001
//LKED.SYSLIB DD                                                        00070001
// DD DSN=FLASS.PF.LOAD,DISP=SHR                                        00080001
// DD DSN=SYSTEMS.LINKLIB,DISP=SHR                                      00090001
//LKED.SYSLMOD  DD DSN=FLASS.PF.LOAD,DISP=SHR                           00100001
//LKED.SYSPRINT DD SYSOUT=X,CHARS=GT12                                  00110001
//LKED.SYSIN DD *                                                       00120001
 NAME PCXGEN(R)                                                         00130001
//* -------------- END OF LINKEDIT STEP ------------------------------* 00140001
