//FLASSP   JOB  (),'UNPK',CLASS=J,MSGCLASS=Z,                           00001001
//         NOTIFY=$                                                     00002001
//********************************************************************* 00003001
//*                PL/I COMPILE AND LINK                              * 00004001
//********************************************************************* 00005001
// EXEC PLIXCL,                                                         00006001
//   PARM.PLI='M,NIS,S,STMT,XREF,GS,AG,LANGLVL(SPROG)',                 00007001
//   PARM.LKED='LIST,MAP,XREF'                                          00008001
//PLI.SYSPRINT DD SYSOUT=X,CHARS=GT12                                   00009001
//PLI.SYSLIB   DD DSN=FLASS.PF.PLIMAC,DISP=SHR                          00009101
//PLI.SYSIN    DD *                                                     00009201
 /********************************************************************/ 00011001
 /*                                                                  */ 00020001
 /* Module ID:     UNPK                                              */ 00021001
 /* Function:      Unpack uploaded fonts                             */ 00022001
 /* Author:        Peter Flass                                       */ 00023001
 /*                Sep, 2008                                         */ 00024001
 /* Description:   Fontbank fonts are distributed as EBCDIC binaries */ 00025001
 /*                in a PC zip file.  The best way to transfer       */ 00026001
 /*                them securely seemed to be to unzip the fonts     */ 00027001
 /*                and upload them in binary as FB RECSIZE(80).      */ 00028001
 /*                This procedure reconstructs the VB font file.     */ 00029001
 /* Modifications:                                                   */ 00029106
 /*     2008-12-03: Add parm, 'CRLF' option.  CRLF is required for   */ 00029206
 /*                 Fontbank fonts, not for type transformer.        */ 00029306
 /*                                                                  */ 00029406
 /********************************************************************/ 00030001
 UNPK: proc(parm) options(main);                                        00040006
   dcl   parm                char(100)      varying;                    00050006
   dcl   infile              record env(FB RECSIZE(80) );               00051006
   dcl   outfile             record env(VB RECSIZE(12284) );            00060004
   dcl   inbuf               char(80);                                  00061001
   dcl   outbuf              char(12284)    varying;                    00062001
   dcl  (ip,op)              ptr;                                       00063001
   dcl   outwrk              char(12284);                               00063101
   dcl   pOut                ptr;                                       00064001
   dcl   rec                 fixed bin(15)       init(1);               00064101
   dcl   eof                 bit(1)         init( '0'b );               00065001
   dcl   crlf                bit(1)         init( '0'b );               00065106
                                                                        00065206
   dcl   c                   char(1)        based;                      00065306
                                                                        00066001
   on endfile(infile) eof='1'b;                                         00067001
                                                                        00068001
   if index(parm,'CRLF')>0 then crlf='1'b;                              00068106
                                                                        00068206
   open file(infile)  input,                                            00069001
        file(outfile) output;                                           00069101
   Pout = addr(outwrk);                                                 00069201
   op = pOut;                                                           00069301
   read file(infile) into(inbuf);                                       00069401
   ip = addr(inbuf);                                                    00069501
                                                                        00069701
   do while( ªeof );                                                    00069801
     call process;                                                      00069901
     if ªeof then do;                  /* Record to write?           */ 00070005
       /* For some reason the records have trailing CR/LF.  I could  */ 00070102
       /* check, but this is a "one-shot" program and any errors will*/ 00070202
       /* be caught later anyhow.  Just truncate the record.         */ 00070302
       if crlf                         /* Move record to buffer      */ 00070406
       then outbuf = substr(outwrk,1,op-pOut-2);                        00070506
       else outbuf = substr(outwrk,1,op-pOut);                          00070606
       write file(outfile) from(outbuf); /* Write it                 */ 00070706
       end;                                                             00070806
     op = pOut;                          /* Set up for next          */ 00070906
     end; /* do while */                                                00071006
                                                                        00071106
   close file(infile),                                                  00071206
         file(outfile);                                                 00071306
   return;                                                              00071406
                                                                        00071506
 /*---------------------------------------------*/                      00071606
 /* Main processing loop.                       */                      00071706
 /*---------------------------------------------*/                      00071806
 process: proc;                                                         00071906
   dcl   c2                  char(2)        based;                      00072006
   dcl   len                 fixed bin(15);                             00072106
   dcl   px                  ptr;                                       00072206
   call move;                          /* Move carriage control      */ 00072306
   if pOut->cª='5A'x then do;          /* Not carriage-control?      */ 00072406
     put skip edit( 'EOF at record ', rec,                              00072506
                    ', pos ', ip-addr(inbuf) )                          00072606
                  (a,p'zzz9');                                          00072706
     put skip edit( 'Char=''', HEXIMAGE(ip,1), '''X' )(a);              00072806
     eof = '1'b;                       /* Must be done               */ 00072906
     return;                                                            00073006
     end; /* ª'5A'x */                                                  00073106
   if eof then call error(1);          /* error                      */ 00073206
   px = op;                            /* Save addr(next_output_char)*/ 00073306
   call move;                          /* Get first byte of length   */ 00073406
   if eof then call error(2);          /* error                      */ 00073506
   call move;                          /* Get second byte of length  */ 00073606
   if eof then call error(3);          /* error                      */ 00073706
   addr(len)->c2 = px->c2;             /* Get length as fixed bin(15)*/ 00073806
   if ªcrlf then len=len-2;            /* Maybe adjust length        */ 00073906
   do while(len>0);                    /* Move 'len' data bytes      */ 00074006
     call move;                        /* Move one byte              */ 00074106
     if eof then call error(4);        /* Make sure we had data      */ 00074206
     len = len-1;                                                       00074306
     end; /* do while */                                                00074406
                                                                        00074501
   end process;                                                         00074601
                                                                        00074701
 /*-------------------------*/                                          00074801
 /* Move one data byte      */                                          00074901
 /*-------------------------*/                                          00075001
 move: proc;                                                            00075101
   if op>=pOut+stg(outwrk) then call error(5);                          00075201
   if ip>=addr(inbuf)+80               /* Make sure we have data     */ 00075301
   then do;                                                             00075401
     read file(infile) into(inbuf);                                     00075501
     if eof then return;                                                00075601
     rec = rec+1;                                                       00075701
     ip = addr(inbuf);                                                  00075901
     end;                                                               00076001
   op->c = ip->c;                                                       00076101
   op = op+1;                                                           00076201
   ip = ip+1;                                                           00076301
   end move;                                                            00076501
                                                                        00076601
   error: proc(n);                                                      00076701
     dcl n                   fixed bin(15);                             00076801
     put skip edit( 'Error ', n,                                        00076901
                    ' record ', rec, ', pos ', ip-addr(inbuf) )         00077001
                  (a,p'zzz9');                                          00077101
     stop;                                                              00077201
     end error;                                                         00077303
                                                                        00079103
   end UNPK;                                                            00080001
//* -------------- SOURCE PROGRAM GOES BEFORE HERE -------------------* 00090001
//LKED.SYSLIB DD                                                        00100001
// DD DSN=FLASS.PF.LOAD,DISP=SHR                                        00110001
// DD DSN=SYSTEMS.LINKLIB,DISP=SHR                                      00120001
//LKED.SYSLMOD  DD DSN=FLASS.PCL.LINKLIB,DISP=SHR                       00130002
//LKED.SYSPRINT DD SYSOUT=X,CHARS=GT12                                  00140001
//LKED.SYSIN DD *                                                       00150001
 NAME UNPK(R)                                                           00160001
//* -------------- END OF LINKEDIT STEP ------------------------------* 00170001
