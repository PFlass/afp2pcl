AFP2PCL is a suite of IBM mainframe programs which converts Advanced Function
Presentation  datastreams (AFP - formerly IBM Advanced Function Printing) to
either  Metacode for Xerox 4090 and 9700, or PCL for current desktop printers.

The installation ran a mix of printers with varying sets of default fonts.  The
objective of AFP2PCL was to interpret the AFP datastream and print documents
identically on all printers. This is not a completely general-purpose program.
It processed many documents in the same general format,  which used a selected
set of fonts from the PCL Century Schoolbook, Helvetica, and Courier families,
which were converted for use on the IBM 3800, and  various Xerox printers. The
documents were generated by Script (DCF) for the 3800 and routed thru AFP2PCL
for the different printers. This code ran in  production for  over ten years,
but is no longer in use, so I'm releasing  it here.

The main conversion routines are written in PL/I Optimizer, with  a few
supporting routines in assembler. As run in production, a JES external writer
intercepted AFP streams for certain printers and did the conversion. Stand-alone
routines converted and printed fonts and provided debugging information. The
PL/I code uses various hex values for the "NOT" symbol, depending on how it was
downloaded, 'AA'x and 'AC'x are possible. I believe the translate tables are
coded in hex for EBCDIC to ASCII conversion, so they should not have been
affected by the download.
 
This code has been sitting in my archives for fifteen years, and is perhaps ten
years older than that.  I have spent  minimal time collecting the supporting
routines. It looks like I have found  everything except simple storage
management routines xAlloc, xFree, and  xStats, which can easily be replaced. I
have done nothing with the code; some assembler routines could now be replaced
by PL/I builtins in newer compilers. I no longer have an environment to compile
or test, so it's possible that some assember bits may still be missing. I will
hopefully  check and repair this.

Whether or not the whole subsystem is usable, the code contains data structures
and embedded knowledge that may be useful. 

This is also my first experience with GIT, so we'll see how it goes.
   - Peter Flass, December 2024 
